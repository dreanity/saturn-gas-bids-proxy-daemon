// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gasbidscontract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GasbidscontractMetaData contains all meta data concerning the Gasbidscontract contract.
var GasbidscontractMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"paymentTokenScale\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientAddr\",\"type\":\"string\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"paymentTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"paymentTokenScale\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recipientAddr\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentTokenAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"recipientAddr\",\"type\":\"string\"}],\"name\":\"createBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawAllToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTokenTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b50608051612d8b61007b6000396000818161049e0152818161052d0152818161070c0152818161079b015261084b0152612d8b6000f3fe6080604052600436106100f75760003560e01c80638129fc1c1161008a578063a02d728211610059578063a02d728214610319578063ae4dd0fc14610356578063c86283c814610393578063f2fde38b146103d0576100fe565b80638129fc1c1461026f5780638da5cb5b146102865780639c59ccbf146102b15780639e281a98146102dc576100fe565b806352d1902d116100c657806352d1902d146101c557806354ad4179146101f057806366bd78fd1461022d578063715018a614610258576100fe565b80632e1a7d4d146101035780633659cfe6146101405780634423c5f1146101695780634f1ef286146101a9576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611bfd565b6103f9565b6040516101379190611c45565b60405180910390f35b34801561014c57600080fd5b5061016760048036038101906101629190611cbe565b61049c565b005b34801561017557600080fd5b50610190600480360381019061018b9190611bfd565b610625565b6040516101a09493929190611dbe565b60405180910390f35b6101c360048036038101906101be9190611f3f565b61070a565b005b3480156101d157600080fd5b506101da610847565b6040516101e79190611fb4565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611fcf565b610900565b6040516102249190611c45565b60405180910390f35b34801561023957600080fd5b50610242610a73565b60405161024f9190612022565b60405180910390f35b34801561026457600080fd5b5061026d610a83565b005b34801561027b57600080fd5b50610284610a97565b005b34801561029257600080fd5b5061029b610bdd565b6040516102a8919061203d565b60405180910390f35b3480156102bd57600080fd5b506102c6610c07565b6040516102d39190612022565b60405180910390f35b3480156102e857600080fd5b5061030360048036038101906102fe9190612058565b610c18565b6040516103109190611c45565b60405180910390f35b34801561032557600080fd5b50610340600480360381019061033b91906120f8565b610d91565b60405161034d9190611c45565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190611cbe565b6111a9565b60405161038a9190611c45565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190612158565b6112df565b6040516103c79190611c45565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190611cbe565b61137c565b005b6000610403611400565b478211610445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043c906121e4565b60405180910390fd5b61044d61147e565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610492573d6000803e3d6000fd5b5060019050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612276565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661056a611486565b73ffffffffffffffffffffffffffffffffffffffff16146105c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b790612308565b60405180910390fd5b6105c9816114dd565b61062281600067ffffffffffffffff8111156105e8576105e7611e14565b5b6040519080825280601f01601f19166020018201604052801561061a5781602001600182028036833780820191505090505b5060006114e8565b50565b60ca6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff169080600101549080600201805461068790612357565b80601f01602080910402602001604051908101604052809291908181526020018280546106b390612357565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b5050505050905084565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090612276565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107d8611486565b73ffffffffffffffffffffffffffffffffffffffff161461082e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082590612308565b60405180910390fd5b610837826114dd565b610843828260016114e8565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce906123fb565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b600061090a611400565b60008490508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610948919061203d565b60206040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190612430565b84116109d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d0906121e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff1660e01b8152600401610a1492919061245d565b602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906124b2565b5060019150509392505050565b6000610a7d611400565b47905090565b610a8b611400565b610a956000611665565b565b60008060019054906101000a900460ff16159050808015610ac85750600160008054906101000a900460ff1660ff16105b80610af55750610ad73061172b565b158015610af45750600160008054906101000a900460ff1660ff16145b5b610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b90612551565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b71576001600060016101000a81548160ff0219169083151502179055505b610b7961174e565b610b816117a7565b8015610bda5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610bd191906125b6565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610c1360c96117f8565b905090565b6000610c22611400565b60008390508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c60919061203d565b60206040518083038186803b158015610c7857600080fd5b505afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb09190612430565b8311610cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce8906121e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610d1561147e565b856040518363ffffffff1660e01b8152600401610d3392919061245d565b602060405180830381600087803b158015610d4d57600080fd5b505af1158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8591906124b2565b50600191505092915050565b6000610d9c8461172b565b610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd290612643565b60405180910390fd5b600084905060003090506000610def61147e565b905060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83856040518363ffffffff1660e01b8152600401610e2e929190612663565b60206040518083038186803b158015610e4657600080fd5b505afa158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190612430565b905060008111610ec3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eba906126d8565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8385846040518463ffffffff1660e01b8152600401610f00939291906126f8565b602060405180830381600087803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5291906124b2565b610f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f889061277b565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101191906127c7565b9050600060405180608001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1681526020018481526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090507fbd5408c0214b622d6afa9a080eb7f8da0eac429db8b790b8dd7993f525c970ee6110c060c96117f8565b8b84868d8d6040516110d796959493929190612821565b60405180910390a18060ca60006110ee60c96117f8565b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160010155606082015181600201908051906020019061118a929190611b10565b5090505061119860c9611806565b600196505050505050509392505050565b60006111b3611400565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6111dc61147e565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611215919061203d565b60206040518083038186803b15801561122d57600080fd5b505afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190612430565b6040518363ffffffff1660e01b815260040161128292919061245d565b602060405180830381600087803b15801561129c57600080fd5b505af11580156112b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d491906124b2565b506001915050919050565b60006112e9611400565b47831161132b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611322906121e4565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611371573d6000803e3d6000fd5b506001905092915050565b611384611400565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113eb906128ef565b60405180910390fd5b6113fd81611665565b50565b61140861147e565b73ffffffffffffffffffffffffffffffffffffffff16611426610bdd565b73ffffffffffffffffffffffffffffffffffffffff161461147c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114739061295b565b60405180910390fd5b565b600033905090565b60006114b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61181c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114e5611400565b50565b6115147f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b611826565b60000160009054906101000a900460ff16156115385761153383611830565b611660565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157e57600080fd5b505afa9250505080156115af57506040513d601f19601f820116820180604052508101906115ac91906129a7565b60015b6115ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e590612a46565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164a90612ad8565b60405180910390fd5b5061165f8383836118e9565b5b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661179d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179490612b6a565b60405180910390fd5b6117a5611915565b565b600060019054906101000a900460ff166117f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ed90612b6a565b60405180910390fd5b565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000819050919050565b6000819050919050565b6118398161172b565b611878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186f90612bfc565b60405180910390fd5b806118a57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61181c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6118f283611976565b6000825111806118ff5750805b156119105761190e83836119c5565b505b505050565b600060019054906101000a900460ff16611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90612b6a565b60405180910390fd5b61197461196f61147e565b611665565b565b61197f81611830565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606119d08361172b565b611a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0690612c8e565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051611a379190612cf5565b600060405180830381855af49150503d8060008114611a72576040519150601f19603f3d011682016040523d82523d6000602084013e611a77565b606091505b5091509150611a9f8282604051806060016040528060278152602001612d2f60279139611aa9565b9250505092915050565b60608315611ab957829050611b09565b600083511115611acc5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b009190612d0c565b60405180910390fd5b9392505050565b828054611b1c90612357565b90600052602060002090601f016020900481019282611b3e5760008555611b85565b82601f10611b5757805160ff1916838001178555611b85565b82800160010185558215611b85579182015b82811115611b84578251825591602001919060010190611b69565b5b509050611b929190611b96565b5090565b5b80821115611baf576000816000905550600101611b97565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611bda81611bc7565b8114611be557600080fd5b50565b600081359050611bf781611bd1565b92915050565b600060208284031215611c1357611c12611bbd565b5b6000611c2184828501611be8565b91505092915050565b60008115159050919050565b611c3f81611c2a565b82525050565b6000602082019050611c5a6000830184611c36565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c8b82611c60565b9050919050565b611c9b81611c80565b8114611ca657600080fd5b50565b600081359050611cb881611c92565b92915050565b600060208284031215611cd457611cd3611bbd565b5b6000611ce284828501611ca9565b91505092915050565b611cf481611c80565b82525050565b600060ff82169050919050565b611d1081611cfa565b82525050565b611d1f81611bc7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d5f578082015181840152602081019050611d44565b83811115611d6e576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d9082611d25565b611d9a8185611d30565b9350611daa818560208601611d41565b611db381611d74565b840191505092915050565b6000608082019050611dd36000830187611ceb565b611de06020830186611d07565b611ded6040830185611d16565b8181036060830152611dff8184611d85565b905095945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e4c82611d74565b810181811067ffffffffffffffff82111715611e6b57611e6a611e14565b5b80604052505050565b6000611e7e611bb3565b9050611e8a8282611e43565b919050565b600067ffffffffffffffff821115611eaa57611ea9611e14565b5b611eb382611d74565b9050602081019050919050565b82818337600083830152505050565b6000611ee2611edd84611e8f565b611e74565b905082815260208101848484011115611efe57611efd611e0f565b5b611f09848285611ec0565b509392505050565b600082601f830112611f2657611f25611e0a565b5b8135611f36848260208601611ecf565b91505092915050565b60008060408385031215611f5657611f55611bbd565b5b6000611f6485828601611ca9565b925050602083013567ffffffffffffffff811115611f8557611f84611bc2565b5b611f9185828601611f11565b9150509250929050565b6000819050919050565b611fae81611f9b565b82525050565b6000602082019050611fc96000830184611fa5565b92915050565b600080600060608486031215611fe857611fe7611bbd565b5b6000611ff686828701611ca9565b935050602061200786828701611be8565b925050604061201886828701611ca9565b9150509250925092565b60006020820190506120376000830184611d16565b92915050565b60006020820190506120526000830184611ceb565b92915050565b6000806040838503121561206f5761206e611bbd565b5b600061207d85828601611ca9565b925050602061208e85828601611be8565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126120b8576120b7611e0a565b5b8235905067ffffffffffffffff8111156120d5576120d4612098565b5b6020830191508360018202830111156120f1576120f061209d565b5b9250929050565b60008060006040848603121561211157612110611bbd565b5b600061211f86828701611ca9565b935050602084013567ffffffffffffffff8111156121405761213f611bc2565b5b61214c868287016120a2565b92509250509250925092565b6000806040838503121561216f5761216e611bbd565b5b600061217d85828601611be8565b925050602061218e85828601611ca9565b9150509250929050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006121ce601283611d30565b91506121d982612198565b602082019050919050565b600060208201905081810360008301526121fd816121c1565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000612260602c83611d30565b915061226b82612204565b604082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006122f2602c83611d30565b91506122fd82612296565b604082019050919050565b60006020820190508181036000830152612321816122e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061236f57607f821691505b6020821081141561238357612382612328565b5b50919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006123e5603883611d30565b91506123f082612389565b604082019050919050565b60006020820190508181036000830152612414816123d8565b9050919050565b60008151905061242a81611bd1565b92915050565b60006020828403121561244657612445611bbd565b5b60006124548482850161241b565b91505092915050565b60006040820190506124726000830185611ceb565b61247f6020830184611d16565b9392505050565b61248f81611c2a565b811461249a57600080fd5b50565b6000815190506124ac81612486565b92915050565b6000602082840312156124c8576124c7611bbd565b5b60006124d68482850161249d565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061253b602e83611d30565b9150612546826124df565b604082019050919050565b6000602082019050818103600083015261256a8161252e565b9050919050565b6000819050919050565b6000819050919050565b60006125a061259b61259684612571565b61257b565b611cfa565b9050919050565b6125b081612585565b82525050565b60006020820190506125cb60008301846125a7565b92915050565b7f7061796d656e74546f6b656e416464722073686f756c6420706f696e7420746f60008201527f206120736d61727420636f6e7472616374000000000000000000000000000000602082015250565b600061262d603183611d30565b9150612638826125d1565b604082019050919050565b6000602082019050818103600083015261265c81612620565b9050919050565b60006040820190506126786000830185611ceb565b6126856020830184611ceb565b9392505050565b7f616c6c6f77616e6365206d7573742062652067726561746572207468616e2030600082015250565b60006126c2602083611d30565b91506126cd8261268c565b602082019050919050565b600060208201905081810360008301526126f1816126b5565b9050919050565b600060608201905061270d6000830186611ceb565b61271a6020830185611ceb565b6127276040830184611d16565b949350505050565b7f7472616e736665722066726f6d206661696c6564000000000000000000000000600082015250565b6000612765601483611d30565b91506127708261272f565b602082019050919050565b6000602082019050818103600083015261279481612758565b9050919050565b6127a481611cfa565b81146127af57600080fd5b50565b6000815190506127c18161279b565b92915050565b6000602082840312156127dd576127dc611bbd565b5b60006127eb848285016127b2565b91505092915050565b60006128008385611d30565b935061280d838584611ec0565b61281683611d74565b840190509392505050565b600060a0820190506128366000830189611d16565b6128436020830188611ceb565b6128506040830187611d07565b61285d6060830186611d16565b81810360808301526128708184866127f4565b9050979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006128d9602683611d30565b91506128e48261287d565b604082019050919050565b60006020820190508181036000830152612908816128cc565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612945602083611d30565b91506129508261290f565b602082019050919050565b6000602082019050818103600083015261297481612938565b9050919050565b61298481611f9b565b811461298f57600080fd5b50565b6000815190506129a18161297b565b92915050565b6000602082840312156129bd576129bc611bbd565b5b60006129cb84828501612992565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000612a30602e83611d30565b9150612a3b826129d4565b604082019050919050565b60006020820190508181036000830152612a5f81612a23565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000612ac2602983611d30565b9150612acd82612a66565b604082019050919050565b60006020820190508181036000830152612af181612ab5565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612b54602b83611d30565b9150612b5f82612af8565b604082019050919050565b60006020820190508181036000830152612b8381612b47565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000612be6602d83611d30565b9150612bf182612b8a565b604082019050919050565b60006020820190508181036000830152612c1581612bd9565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000612c78602683611d30565b9150612c8382612c1c565b604082019050919050565b60006020820190508181036000830152612ca781612c6b565b9050919050565b600081519050919050565b600081905092915050565b6000612ccf82612cae565b612cd98185612cb9565b9350612ce9818560208601611d41565b80840191505092915050565b6000612d018284612cc4565b915081905092915050565b60006020820190508181036000830152612d268184611d85565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220682bafeec7d109f7f007b8e3d771fa0398a7a5f961dcab72fb4bfd19688bcfac64736f6c63430008090033",
}

// GasbidscontractABI is the input ABI used to generate the binding from.
// Deprecated: Use GasbidscontractMetaData.ABI instead.
var GasbidscontractABI = GasbidscontractMetaData.ABI

// GasbidscontractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GasbidscontractMetaData.Bin instead.
var GasbidscontractBin = GasbidscontractMetaData.Bin

// DeployGasbidscontract deploys a new Ethereum contract, binding an instance of Gasbidscontract to it.
func DeployGasbidscontract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Gasbidscontract, error) {
	parsed, err := GasbidscontractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GasbidscontractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gasbidscontract{GasbidscontractCaller: GasbidscontractCaller{contract: contract}, GasbidscontractTransactor: GasbidscontractTransactor{contract: contract}, GasbidscontractFilterer: GasbidscontractFilterer{contract: contract}}, nil
}

// Gasbidscontract is an auto generated Go binding around an Ethereum contract.
type Gasbidscontract struct {
	GasbidscontractCaller     // Read-only binding to the contract
	GasbidscontractTransactor // Write-only binding to the contract
	GasbidscontractFilterer   // Log filterer for contract events
}

// GasbidscontractCaller is an auto generated read-only Go binding around an Ethereum contract.
type GasbidscontractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GasbidscontractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GasbidscontractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GasbidscontractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GasbidscontractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GasbidscontractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GasbidscontractSession struct {
	Contract     *Gasbidscontract  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GasbidscontractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GasbidscontractCallerSession struct {
	Contract *GasbidscontractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// GasbidscontractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GasbidscontractTransactorSession struct {
	Contract     *GasbidscontractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// GasbidscontractRaw is an auto generated low-level Go binding around an Ethereum contract.
type GasbidscontractRaw struct {
	Contract *Gasbidscontract // Generic contract binding to access the raw methods on
}

// GasbidscontractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GasbidscontractCallerRaw struct {
	Contract *GasbidscontractCaller // Generic read-only contract binding to access the raw methods on
}

// GasbidscontractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GasbidscontractTransactorRaw struct {
	Contract *GasbidscontractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGasbidscontract creates a new instance of Gasbidscontract, bound to a specific deployed contract.
func NewGasbidscontract(address common.Address, backend bind.ContractBackend) (*Gasbidscontract, error) {
	contract, err := bindGasbidscontract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gasbidscontract{GasbidscontractCaller: GasbidscontractCaller{contract: contract}, GasbidscontractTransactor: GasbidscontractTransactor{contract: contract}, GasbidscontractFilterer: GasbidscontractFilterer{contract: contract}}, nil
}

// NewGasbidscontractCaller creates a new read-only instance of Gasbidscontract, bound to a specific deployed contract.
func NewGasbidscontractCaller(address common.Address, caller bind.ContractCaller) (*GasbidscontractCaller, error) {
	contract, err := bindGasbidscontract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GasbidscontractCaller{contract: contract}, nil
}

// NewGasbidscontractTransactor creates a new write-only instance of Gasbidscontract, bound to a specific deployed contract.
func NewGasbidscontractTransactor(address common.Address, transactor bind.ContractTransactor) (*GasbidscontractTransactor, error) {
	contract, err := bindGasbidscontract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GasbidscontractTransactor{contract: contract}, nil
}

// NewGasbidscontractFilterer creates a new log filterer instance of Gasbidscontract, bound to a specific deployed contract.
func NewGasbidscontractFilterer(address common.Address, filterer bind.ContractFilterer) (*GasbidscontractFilterer, error) {
	contract, err := bindGasbidscontract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GasbidscontractFilterer{contract: contract}, nil
}

// bindGasbidscontract binds a generic wrapper to an already deployed contract.
func bindGasbidscontract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GasbidscontractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gasbidscontract *GasbidscontractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gasbidscontract.Contract.GasbidscontractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gasbidscontract *GasbidscontractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.GasbidscontractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gasbidscontract *GasbidscontractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.GasbidscontractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gasbidscontract *GasbidscontractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gasbidscontract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gasbidscontract *GasbidscontractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gasbidscontract *GasbidscontractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.contract.Transact(opts, method, params...)
}

// Bids is a free data retrieval call binding the contract method 0x4423c5f1.
//
// Solidity: function bids(uint256 ) view returns(address paymentTokenAddr, uint8 paymentTokenScale, uint256 paymentAmount, string recipientAddr)
func (_Gasbidscontract *GasbidscontractCaller) Bids(opts *bind.CallOpts, arg0 *big.Int) (struct {
	PaymentTokenAddr  common.Address
	PaymentTokenScale uint8
	PaymentAmount     *big.Int
	RecipientAddr     string
}, error) {
	var out []interface{}
	err := _Gasbidscontract.contract.Call(opts, &out, "bids", arg0)

	outstruct := new(struct {
		PaymentTokenAddr  common.Address
		PaymentTokenScale uint8
		PaymentAmount     *big.Int
		RecipientAddr     string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PaymentTokenAddr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.PaymentTokenScale = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.PaymentAmount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.RecipientAddr = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// Bids is a free data retrieval call binding the contract method 0x4423c5f1.
//
// Solidity: function bids(uint256 ) view returns(address paymentTokenAddr, uint8 paymentTokenScale, uint256 paymentAmount, string recipientAddr)
func (_Gasbidscontract *GasbidscontractSession) Bids(arg0 *big.Int) (struct {
	PaymentTokenAddr  common.Address
	PaymentTokenScale uint8
	PaymentAmount     *big.Int
	RecipientAddr     string
}, error) {
	return _Gasbidscontract.Contract.Bids(&_Gasbidscontract.CallOpts, arg0)
}

// Bids is a free data retrieval call binding the contract method 0x4423c5f1.
//
// Solidity: function bids(uint256 ) view returns(address paymentTokenAddr, uint8 paymentTokenScale, uint256 paymentAmount, string recipientAddr)
func (_Gasbidscontract *GasbidscontractCallerSession) Bids(arg0 *big.Int) (struct {
	PaymentTokenAddr  common.Address
	PaymentTokenScale uint8
	PaymentAmount     *big.Int
	RecipientAddr     string
}, error) {
	return _Gasbidscontract.Contract.Bids(&_Gasbidscontract.CallOpts, arg0)
}

// GetBalanceContract is a free data retrieval call binding the contract method 0x66bd78fd.
//
// Solidity: function getBalanceContract() view returns(uint256)
func (_Gasbidscontract *GasbidscontractCaller) GetBalanceContract(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gasbidscontract.contract.Call(opts, &out, "getBalanceContract")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalanceContract is a free data retrieval call binding the contract method 0x66bd78fd.
//
// Solidity: function getBalanceContract() view returns(uint256)
func (_Gasbidscontract *GasbidscontractSession) GetBalanceContract() (*big.Int, error) {
	return _Gasbidscontract.Contract.GetBalanceContract(&_Gasbidscontract.CallOpts)
}

// GetBalanceContract is a free data retrieval call binding the contract method 0x66bd78fd.
//
// Solidity: function getBalanceContract() view returns(uint256)
func (_Gasbidscontract *GasbidscontractCallerSession) GetBalanceContract() (*big.Int, error) {
	return _Gasbidscontract.Contract.GetBalanceContract(&_Gasbidscontract.CallOpts)
}

// GetBidsCounter is a free data retrieval call binding the contract method 0x9c59ccbf.
//
// Solidity: function getBidsCounter() view returns(uint256)
func (_Gasbidscontract *GasbidscontractCaller) GetBidsCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gasbidscontract.contract.Call(opts, &out, "getBidsCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBidsCounter is a free data retrieval call binding the contract method 0x9c59ccbf.
//
// Solidity: function getBidsCounter() view returns(uint256)
func (_Gasbidscontract *GasbidscontractSession) GetBidsCounter() (*big.Int, error) {
	return _Gasbidscontract.Contract.GetBidsCounter(&_Gasbidscontract.CallOpts)
}

// GetBidsCounter is a free data retrieval call binding the contract method 0x9c59ccbf.
//
// Solidity: function getBidsCounter() view returns(uint256)
func (_Gasbidscontract *GasbidscontractCallerSession) GetBidsCounter() (*big.Int, error) {
	return _Gasbidscontract.Contract.GetBidsCounter(&_Gasbidscontract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gasbidscontract *GasbidscontractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gasbidscontract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gasbidscontract *GasbidscontractSession) Owner() (common.Address, error) {
	return _Gasbidscontract.Contract.Owner(&_Gasbidscontract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gasbidscontract *GasbidscontractCallerSession) Owner() (common.Address, error) {
	return _Gasbidscontract.Contract.Owner(&_Gasbidscontract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Gasbidscontract *GasbidscontractCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gasbidscontract.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Gasbidscontract *GasbidscontractSession) ProxiableUUID() ([32]byte, error) {
	return _Gasbidscontract.Contract.ProxiableUUID(&_Gasbidscontract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Gasbidscontract *GasbidscontractCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Gasbidscontract.Contract.ProxiableUUID(&_Gasbidscontract.CallOpts)
}

// CreateBid is a paid mutator transaction binding the contract method 0xa02d7282.
//
// Solidity: function createBid(address paymentTokenAddr, string recipientAddr) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactor) CreateBid(opts *bind.TransactOpts, paymentTokenAddr common.Address, recipientAddr string) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "createBid", paymentTokenAddr, recipientAddr)
}

// CreateBid is a paid mutator transaction binding the contract method 0xa02d7282.
//
// Solidity: function createBid(address paymentTokenAddr, string recipientAddr) returns(bool)
func (_Gasbidscontract *GasbidscontractSession) CreateBid(paymentTokenAddr common.Address, recipientAddr string) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.CreateBid(&_Gasbidscontract.TransactOpts, paymentTokenAddr, recipientAddr)
}

// CreateBid is a paid mutator transaction binding the contract method 0xa02d7282.
//
// Solidity: function createBid(address paymentTokenAddr, string recipientAddr) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactorSession) CreateBid(paymentTokenAddr common.Address, recipientAddr string) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.CreateBid(&_Gasbidscontract.TransactOpts, paymentTokenAddr, recipientAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gasbidscontract *GasbidscontractTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gasbidscontract *GasbidscontractSession) Initialize() (*types.Transaction, error) {
	return _Gasbidscontract.Contract.Initialize(&_Gasbidscontract.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Gasbidscontract *GasbidscontractTransactorSession) Initialize() (*types.Transaction, error) {
	return _Gasbidscontract.Contract.Initialize(&_Gasbidscontract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gasbidscontract *GasbidscontractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gasbidscontract *GasbidscontractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gasbidscontract.Contract.RenounceOwnership(&_Gasbidscontract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gasbidscontract *GasbidscontractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gasbidscontract.Contract.RenounceOwnership(&_Gasbidscontract.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gasbidscontract *GasbidscontractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gasbidscontract *GasbidscontractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.TransferOwnership(&_Gasbidscontract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gasbidscontract *GasbidscontractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.TransferOwnership(&_Gasbidscontract.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Gasbidscontract *GasbidscontractTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Gasbidscontract *GasbidscontractSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.UpgradeTo(&_Gasbidscontract.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Gasbidscontract *GasbidscontractTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.UpgradeTo(&_Gasbidscontract.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Gasbidscontract *GasbidscontractTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Gasbidscontract *GasbidscontractSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.UpgradeToAndCall(&_Gasbidscontract.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Gasbidscontract *GasbidscontractTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.UpgradeToAndCall(&_Gasbidscontract.TransactOpts, newImplementation, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactor) Withdraw(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "withdraw", _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns(bool)
func (_Gasbidscontract *GasbidscontractSession) Withdraw(_amount *big.Int) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.Withdraw(&_Gasbidscontract.TransactOpts, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _amount) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactorSession) Withdraw(_amount *big.Int) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.Withdraw(&_Gasbidscontract.TransactOpts, _amount)
}

// WithdrawAllToken is a paid mutator transaction binding the contract method 0xae4dd0fc.
//
// Solidity: function withdrawAllToken(address _tokenContract) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactor) WithdrawAllToken(opts *bind.TransactOpts, _tokenContract common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "withdrawAllToken", _tokenContract)
}

// WithdrawAllToken is a paid mutator transaction binding the contract method 0xae4dd0fc.
//
// Solidity: function withdrawAllToken(address _tokenContract) returns(bool)
func (_Gasbidscontract *GasbidscontractSession) WithdrawAllToken(_tokenContract common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawAllToken(&_Gasbidscontract.TransactOpts, _tokenContract)
}

// WithdrawAllToken is a paid mutator transaction binding the contract method 0xae4dd0fc.
//
// Solidity: function withdrawAllToken(address _tokenContract) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactorSession) WithdrawAllToken(_tokenContract common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawAllToken(&_Gasbidscontract.TransactOpts, _tokenContract)
}

// WithdrawTo is a paid mutator transaction binding the contract method 0xc86283c8.
//
// Solidity: function withdrawTo(uint256 _amount, address _to) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactor) WithdrawTo(opts *bind.TransactOpts, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "withdrawTo", _amount, _to)
}

// WithdrawTo is a paid mutator transaction binding the contract method 0xc86283c8.
//
// Solidity: function withdrawTo(uint256 _amount, address _to) returns(bool)
func (_Gasbidscontract *GasbidscontractSession) WithdrawTo(_amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawTo(&_Gasbidscontract.TransactOpts, _amount, _to)
}

// WithdrawTo is a paid mutator transaction binding the contract method 0xc86283c8.
//
// Solidity: function withdrawTo(uint256 _amount, address _to) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactorSession) WithdrawTo(_amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawTo(&_Gasbidscontract.TransactOpts, _amount, _to)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x9e281a98.
//
// Solidity: function withdrawToken(address _tokenContract, uint256 _amount) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactor) WithdrawToken(opts *bind.TransactOpts, _tokenContract common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "withdrawToken", _tokenContract, _amount)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x9e281a98.
//
// Solidity: function withdrawToken(address _tokenContract, uint256 _amount) returns(bool)
func (_Gasbidscontract *GasbidscontractSession) WithdrawToken(_tokenContract common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawToken(&_Gasbidscontract.TransactOpts, _tokenContract, _amount)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x9e281a98.
//
// Solidity: function withdrawToken(address _tokenContract, uint256 _amount) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactorSession) WithdrawToken(_tokenContract common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawToken(&_Gasbidscontract.TransactOpts, _tokenContract, _amount)
}

// WithdrawTokenTo is a paid mutator transaction binding the contract method 0x54ad4179.
//
// Solidity: function withdrawTokenTo(address _tokenContract, uint256 _amount, address _to) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactor) WithdrawTokenTo(opts *bind.TransactOpts, _tokenContract common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.contract.Transact(opts, "withdrawTokenTo", _tokenContract, _amount, _to)
}

// WithdrawTokenTo is a paid mutator transaction binding the contract method 0x54ad4179.
//
// Solidity: function withdrawTokenTo(address _tokenContract, uint256 _amount, address _to) returns(bool)
func (_Gasbidscontract *GasbidscontractSession) WithdrawTokenTo(_tokenContract common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawTokenTo(&_Gasbidscontract.TransactOpts, _tokenContract, _amount, _to)
}

// WithdrawTokenTo is a paid mutator transaction binding the contract method 0x54ad4179.
//
// Solidity: function withdrawTokenTo(address _tokenContract, uint256 _amount, address _to) returns(bool)
func (_Gasbidscontract *GasbidscontractTransactorSession) WithdrawTokenTo(_tokenContract common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Gasbidscontract.Contract.WithdrawTokenTo(&_Gasbidscontract.TransactOpts, _tokenContract, _amount, _to)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Gasbidscontract *GasbidscontractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gasbidscontract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Gasbidscontract *GasbidscontractSession) Receive() (*types.Transaction, error) {
	return _Gasbidscontract.Contract.Receive(&_Gasbidscontract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Gasbidscontract *GasbidscontractTransactorSession) Receive() (*types.Transaction, error) {
	return _Gasbidscontract.Contract.Receive(&_Gasbidscontract.TransactOpts)
}

// GasbidscontractAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Gasbidscontract contract.
type GasbidscontractAdminChangedIterator struct {
	Event *GasbidscontractAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasbidscontractAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasbidscontractAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasbidscontractAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasbidscontractAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasbidscontractAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasbidscontractAdminChanged represents a AdminChanged event raised by the Gasbidscontract contract.
type GasbidscontractAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Gasbidscontract *GasbidscontractFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*GasbidscontractAdminChangedIterator, error) {

	logs, sub, err := _Gasbidscontract.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &GasbidscontractAdminChangedIterator{contract: _Gasbidscontract.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Gasbidscontract *GasbidscontractFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *GasbidscontractAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Gasbidscontract.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasbidscontractAdminChanged)
				if err := _Gasbidscontract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Gasbidscontract *GasbidscontractFilterer) ParseAdminChanged(log types.Log) (*GasbidscontractAdminChanged, error) {
	event := new(GasbidscontractAdminChanged)
	if err := _Gasbidscontract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasbidscontractBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Gasbidscontract contract.
type GasbidscontractBeaconUpgradedIterator struct {
	Event *GasbidscontractBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasbidscontractBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasbidscontractBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasbidscontractBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasbidscontractBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasbidscontractBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasbidscontractBeaconUpgraded represents a BeaconUpgraded event raised by the Gasbidscontract contract.
type GasbidscontractBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Gasbidscontract *GasbidscontractFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*GasbidscontractBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Gasbidscontract.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &GasbidscontractBeaconUpgradedIterator{contract: _Gasbidscontract.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Gasbidscontract *GasbidscontractFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *GasbidscontractBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Gasbidscontract.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasbidscontractBeaconUpgraded)
				if err := _Gasbidscontract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Gasbidscontract *GasbidscontractFilterer) ParseBeaconUpgraded(log types.Log) (*GasbidscontractBeaconUpgraded, error) {
	event := new(GasbidscontractBeaconUpgraded)
	if err := _Gasbidscontract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasbidscontractBidCreatedIterator is returned from FilterBidCreated and is used to iterate over the raw logs and unpacked data for BidCreated events raised by the Gasbidscontract contract.
type GasbidscontractBidCreatedIterator struct {
	Event *GasbidscontractBidCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasbidscontractBidCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasbidscontractBidCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasbidscontractBidCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasbidscontractBidCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasbidscontractBidCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasbidscontractBidCreated represents a BidCreated event raised by the Gasbidscontract contract.
type GasbidscontractBidCreated struct {
	Index             *big.Int
	PaymentTokenAddr  common.Address
	PaymentTokenScale uint8
	PaymentAmount     *big.Int
	RecipientAddr     string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterBidCreated is a free log retrieval operation binding the contract event 0xbd5408c0214b622d6afa9a080eb7f8da0eac429db8b790b8dd7993f525c970ee.
//
// Solidity: event BidCreated(uint256 index, address paymentTokenAddr, uint8 paymentTokenScale, uint256 paymentAmount, string recipientAddr)
func (_Gasbidscontract *GasbidscontractFilterer) FilterBidCreated(opts *bind.FilterOpts) (*GasbidscontractBidCreatedIterator, error) {

	logs, sub, err := _Gasbidscontract.contract.FilterLogs(opts, "BidCreated")
	if err != nil {
		return nil, err
	}
	return &GasbidscontractBidCreatedIterator{contract: _Gasbidscontract.contract, event: "BidCreated", logs: logs, sub: sub}, nil
}

// WatchBidCreated is a free log subscription operation binding the contract event 0xbd5408c0214b622d6afa9a080eb7f8da0eac429db8b790b8dd7993f525c970ee.
//
// Solidity: event BidCreated(uint256 index, address paymentTokenAddr, uint8 paymentTokenScale, uint256 paymentAmount, string recipientAddr)
func (_Gasbidscontract *GasbidscontractFilterer) WatchBidCreated(opts *bind.WatchOpts, sink chan<- *GasbidscontractBidCreated) (event.Subscription, error) {

	logs, sub, err := _Gasbidscontract.contract.WatchLogs(opts, "BidCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasbidscontractBidCreated)
				if err := _Gasbidscontract.contract.UnpackLog(event, "BidCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidCreated is a log parse operation binding the contract event 0xbd5408c0214b622d6afa9a080eb7f8da0eac429db8b790b8dd7993f525c970ee.
//
// Solidity: event BidCreated(uint256 index, address paymentTokenAddr, uint8 paymentTokenScale, uint256 paymentAmount, string recipientAddr)
func (_Gasbidscontract *GasbidscontractFilterer) ParseBidCreated(log types.Log) (*GasbidscontractBidCreated, error) {
	event := new(GasbidscontractBidCreated)
	if err := _Gasbidscontract.contract.UnpackLog(event, "BidCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasbidscontractInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Gasbidscontract contract.
type GasbidscontractInitializedIterator struct {
	Event *GasbidscontractInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasbidscontractInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasbidscontractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasbidscontractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasbidscontractInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasbidscontractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasbidscontractInitialized represents a Initialized event raised by the Gasbidscontract contract.
type GasbidscontractInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gasbidscontract *GasbidscontractFilterer) FilterInitialized(opts *bind.FilterOpts) (*GasbidscontractInitializedIterator, error) {

	logs, sub, err := _Gasbidscontract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &GasbidscontractInitializedIterator{contract: _Gasbidscontract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gasbidscontract *GasbidscontractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *GasbidscontractInitialized) (event.Subscription, error) {

	logs, sub, err := _Gasbidscontract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasbidscontractInitialized)
				if err := _Gasbidscontract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Gasbidscontract *GasbidscontractFilterer) ParseInitialized(log types.Log) (*GasbidscontractInitialized, error) {
	event := new(GasbidscontractInitialized)
	if err := _Gasbidscontract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasbidscontractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gasbidscontract contract.
type GasbidscontractOwnershipTransferredIterator struct {
	Event *GasbidscontractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasbidscontractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasbidscontractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasbidscontractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasbidscontractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasbidscontractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasbidscontractOwnershipTransferred represents a OwnershipTransferred event raised by the Gasbidscontract contract.
type GasbidscontractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gasbidscontract *GasbidscontractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GasbidscontractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gasbidscontract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GasbidscontractOwnershipTransferredIterator{contract: _Gasbidscontract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gasbidscontract *GasbidscontractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GasbidscontractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gasbidscontract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasbidscontractOwnershipTransferred)
				if err := _Gasbidscontract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gasbidscontract *GasbidscontractFilterer) ParseOwnershipTransferred(log types.Log) (*GasbidscontractOwnershipTransferred, error) {
	event := new(GasbidscontractOwnershipTransferred)
	if err := _Gasbidscontract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasbidscontractUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Gasbidscontract contract.
type GasbidscontractUpgradedIterator struct {
	Event *GasbidscontractUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasbidscontractUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasbidscontractUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasbidscontractUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasbidscontractUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasbidscontractUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasbidscontractUpgraded represents a Upgraded event raised by the Gasbidscontract contract.
type GasbidscontractUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Gasbidscontract *GasbidscontractFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*GasbidscontractUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Gasbidscontract.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &GasbidscontractUpgradedIterator{contract: _Gasbidscontract.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Gasbidscontract *GasbidscontractFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *GasbidscontractUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Gasbidscontract.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasbidscontractUpgraded)
				if err := _Gasbidscontract.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Gasbidscontract *GasbidscontractFilterer) ParseUpgraded(log types.Log) (*GasbidscontractUpgraded, error) {
	event := new(GasbidscontractUpgraded)
	if err := _Gasbidscontract.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
